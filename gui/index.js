const express = require('express');
const { ethers } = require('ethers');
require('dotenv').config();

const app = express();
app.use(express.json());

// Load environment variables (e.g., contract address, ABI)
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
const PRIVATE_KEY = process.env.PRIVATE_KEY; // Wallet private key
const PROVIDER_URL = process.env.PROVIDER_URL; // URL of the local hardhat node

// Initialize ethers provider and wallet
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1");
const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

// ABI of the deployed contract
const contractABI = [
   // Place the ABI generated by Hardhat or from the compiled contract here
   {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }

];

// Connect to the deployed Lock contract
const lockContract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, wallet);

// Endpoint to get unlock time
app.get('/unlockTime', async (req, res) => {
   try {
      const unlockTime = await lockContract.unlockTime();
      res.json({ unlockTime: unlockTime.toString() });
   } catch (err) {
      res.status(500).json({ error: err.message });
   }
});

// Endpoint to withdraw funds
app.post('/withdraw', async (req, res) => {
   try {
      const tx = await lockContract.withdraw();
      await tx.wait(); // Wait for transaction to be mined
      res.json({ message: 'Withdrawal successful', txHash: tx.hash });
   } catch (err) {
      res.status(500).json({ error: err.message });
   }
});

// Serve frontend
app.use(express.static('public'));

app.listen(3000, () => {
   console.log('Server listening on port 3000');
});
